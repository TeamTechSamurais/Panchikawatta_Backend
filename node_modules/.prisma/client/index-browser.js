
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.15.1
 * Query Engine version: 34ace0eb2704183d2c05b60b52fba5c43c13f303
 */
Prisma.prismaVersion = {
  client: "5.15.1",
  engine: "34ace0eb2704183d2c05b60b52fba5c43c13f303"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  password: 'password',
  createdAt: 'createdAt',
  deletedAt: 'deletedAt',
  district: 'district',
  phoneNo: 'phoneNo',
  province: 'province',
  userName: 'userName',
  imageUrls: 'imageUrls'
};

exports.Prisma.VehicleScalarFieldEnum = {
  vehicleId: 'vehicleId',
  userId: 'userId',
  model: 'model',
  year: 'year',
  milagePerWeek: 'milagePerWeek',
  licenceDate: 'licenceDate',
  insuranceDate: 'insuranceDate',
  batteryCondition: 'batteryCondition',
  lastServiceDate: 'lastServiceDate',
  make: 'make',
  type: 'type',
  imageUrls: 'imageUrls',
  createdAt: 'createdAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.SellerScalarFieldEnum = {
  userId: 'userId',
  businessAddress: 'businessAddress',
  businessDescription: 'businessDescription',
  businessName: 'businessName',
  businessPhoneNo: 'businessPhoneNo'
};

exports.Prisma.ServiceStationScalarFieldEnum = {
  sellerId: 'sellerId',
  name: 'name',
  address: 'address',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SparePartScalarFieldEnum = {
  sparePartId: 'sparePartId',
  sellerId: 'sellerId',
  price: 'price',
  model: 'model',
  origin: 'origin',
  year: 'year',
  description: 'description',
  condition: 'condition',
  createdAt: 'createdAt',
  deletedAt: 'deletedAt',
  fuel: 'fuel',
  make: 'make',
  title: 'title',
  userId: 'userId',
  clickCount: 'clickCount',
  imageUrls: 'imageUrls',
  type: 'type'
};

exports.Prisma.ServiceScalarFieldEnum = {
  serviceId: 'serviceId',
  sellerId: 'sellerId',
  createdAt: 'createdAt',
  deletedAt: 'deletedAt',
  description: 'description',
  title: 'title',
  userId: 'userId',
  clickCount: 'clickCount',
  price: 'price',
  imageUrls: 'imageUrls',
  type: 'type'
};

exports.Prisma.ServiceServiceStationScalarFieldEnum = {
  sellerId: 'sellerId',
  serviceId: 'serviceId',
  createdAt: 'createdAt'
};

exports.Prisma.UserSparePartScalarFieldEnum = {
  userId: 'userId',
  sparePartId: 'sparePartId',
  createdAt: 'createdAt'
};

exports.Prisma.UserServiceScalarFieldEnum = {
  userId: 'userId',
  serviceId: 'serviceId',
  createdAt: 'createdAt'
};

exports.Prisma.UserFavoriteSparePartScalarFieldEnum = {
  userId: 'userId',
  sparePartId: 'sparePartId',
  createdAt: 'createdAt'
};

exports.Prisma.OrderSparePartScalarFieldEnum = {
  orderId: 'orderId',
  sparePartId: 'sparePartId',
  userId: 'userId',
  dateTime: 'dateTime',
  status: 'status',
  email: 'email',
  name: 'name',
  phoneNO: 'phoneNO',
  address: 'address'
};

exports.Prisma.AdminScalarFieldEnum = {
  adminID: 'adminID',
  email: 'email',
  adminUsername: 'adminUsername',
  password: 'password'
};

exports.Prisma.TestModelScalarFieldEnum = {
  id: 'id',
  photo1: 'photo1',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Vehicle: 'Vehicle',
  Seller: 'Seller',
  ServiceStation: 'ServiceStation',
  SparePart: 'SparePart',
  Service: 'Service',
  ServiceServiceStation: 'ServiceServiceStation',
  UserSparePart: 'UserSparePart',
  UserService: 'UserService',
  UserFavoriteSparePart: 'UserFavoriteSparePart',
  OrderSparePart: 'OrderSparePart',
  Admin: 'Admin',
  testModel: 'testModel'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
