generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                     @id @default(autoincrement())
  firstName          String
  lastName           String
  email              String                  @unique
  password           String
  createdAt          DateTime                @default(now())
  deletedAt          DateTime?
  district           String?
  phoneNo            String
  province           String?
  userName           String
  imageUrls          String[]
  orders             OrderSparePart[]
  favoriteSpareParts UserFavoriteSparePart[]
  sellers            Seller?
  services           Service[]
  spareParts         SparePart[]
  favoriteSpareParts UserFavoriteSparePart[]
  vehicles           Vehicle[]

  @@map("user")
}

model Vehicle {
  vehicleId        Int       @id @default(autoincrement())
  userId           Int
  model            String
  year             Int
  milagePerWeek    Int
  licenceDate      String
  insuranceDate    String
  batteryCondition String
  lastServiceDate  String
  make             String
  type             String
  imageUrls        String?
  createdAt        DateTime?
  deletedAt        DateTime?
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("vehicle")
}

model Seller {
  userId              Int    @id
  businessAddress     String
  businessDescription String
  businessName        String
  businessPhoneNo     String
  user                User   @relation(fields: [userId], references: [id])

  @@map("seller")
}

model ServiceStation {
  sellerId  Int
  name      String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([sellerId, name])
  @@map("service_station")
}

model SparePart {
  sparePartId     Int                     @id @default(autoincrement())
  sellerId        Int
  price           Int
  model           String
  origin          String
  year            Int
  description     String
  condition       String
  createdAt       DateTime                @default(now())
  deletedAt       DateTime?
  fuel            String
  make            String
  title           String
  userId          Int?
  clickCount      Int                     @default(0)
  imageUrls       String[]
  type            String
  orders          OrderSparePart[]
  user            User                    @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  favoriteByUsers UserFavoriteSparePart[]
  user            User?                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sparePart")
}

model Service {
  serviceId   Int       @id @default(autoincrement())
  sellerId    Int
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?
  description String
  title       String
  userId      Int?
  clickCount  Int       @default(0)
  price       Int
  imageUrls   String[]
  type        String?
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("service")
}

model ServiceServiceStation {
  sellerId  Int
  serviceId Int
  createdAt DateTime @default(now())

  @@id([sellerId, serviceId])
  @@map("serviceServiceStation")
}

model UserSparePart {
  userId      Int
  sparePartId Int
  createdAt   DateTime @default(now())

  @@id([userId, sparePartId])
  @@map("userSparePart")
}

model UserService {
  userId    Int
  serviceId Int
  createdAt DateTime @default(now())

  @@id([userId, serviceId])
  @@map("userService")
}

model UserFavoriteSparePart {
  userId      Int
  sparePartId Int
  createdAt   DateTime  @default(now())
  sparePart   SparePart @relation(fields: [sparePartId], references: [sparePartId], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id])

  @@id([userId, sparePartId])
  @@map("userFavoriteSparePart")
}

model OrderSparePart {
  orderId     Int       @id @default(autoincrement())
  sparePartId Int
  userId      Int
  dateTime    DateTime  @default(now())
  status      String
  email       String
  name        String
  phoneNo     String
  address     String
  sparePart   SparePart @relation(fields: [sparePartId], references: [sparePartId])
  user        User      @relation(fields: [userId], references: [id])

  @@map("orderSparePart")
}

model Admin {
  adminID       String  @id
  email         String  @unique
  adminUsername String
  password      String
  imageUrls     String?

  @@map("admin")
}

model testModel {
  id        Int      @id @default(autoincrement())
  photo1    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("testModel")
}
