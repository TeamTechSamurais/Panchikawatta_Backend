generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                   @id @default(autoincrement())
  firstName           String
  lastName            String
  userName            String
  email               String                @unique
  password            String
  phoneNo             String
  province            String?
  district            String?
  vehicles            Vehicle[]
  sellers             Seller[]
  spareParts          SparePart[]
  services            Service[]
  favoriteSpareParts  UserFavoriteSparePart[]
  orders              OrderSparePart[]
  deletedAt           DateTime?
  createdAt           DateTime              @default(now())
}

model Vehicle {
  vehicleId           Int                   @id @default(autoincrement())
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              Int
  type                String
  make                String
  model               String
  year                Int
  milagePerWeek       Int
  licenceDate         String
  insuranceDate       String
  lastServiceDate     String
  batteryCondition    String
  imageUrls           String[]
  
  @@map("vehicle")
}

model Seller {
  user                User                  @relation(fields: [userId], references: [id])
  userId              Int
  businessName        String
  businessAddress     String
  businessPhoneNo     String
  businessDescription String

  @@id([userId])
  @@map("seller")
}

model ServiceStation {
  sellerId            Int
  name                String
  address             String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt

  @@id([sellerId, name])
  @@map("serviceStation")
}

model SparePart {
  sparePartId         Int                   @id @default(autoincrement())
  sellerId            Int
  title               String
  description         String
  imageUrls           String[]
  price               Int
  type                String
  make                String
  model               String
  origin              String
  condition           String
  fuel                String
  year                Int
  user                User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              Int?
  favoriteByUsers     UserFavoriteSparePart[]
  orders              OrderSparePart[]
  deletedAt           DateTime?
  createdAt           DateTime              @default(now())
  clickCount          Int                   @default(0)

  @@map("sparePart")
}

model Service {
  serviceId           Int                   @id @default(autoincrement())
  sellerId            Int
  title               String
  description         String
  type                String?
  imageUrls           String[]
  price               Int
  user                User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              Int?
  deletedAt           DateTime?             // Soft delete field
  createdAt           DateTime              @default(now())
  clickCount          Int                   @default(0)

  @@map("service")
}

model ServiceServiceStation {
  sellerId            Int
  serviceId           Int
  createdAt           DateTime              @default(now())

  @@id([sellerId, serviceId])
  @@map("serviceServiceStation")
}

model UserSparePart {
  userId              Int
  sparePartId         Int
  createdAt           DateTime              @default(now())

  @@id([userId, sparePartId])
  @@map("userSparePart")
}

model UserService {
  userId              Int
  serviceId           Int
  createdAt           DateTime              @default(now())

  @@id([userId, serviceId])
  @@map("userService")
}

model UserFavoriteSparePart {
  userId              Int
  sparePartId         Int
  createdAt           DateTime              @default(now())

  user                User                  @relation(fields: [userId], references: [id])
  sparePart           SparePart             @relation(fields: [sparePartId], references: [sparePartId], onDelete: Cascade)

  @@id([userId, sparePartId])
}

model OrderSparePart {
  orderId    Int      @id @default(autoincrement())
  name       String
  email      String
  address    String
  phoneNO    String
  sparePartId Int
  userId     Int
  dateTime   DateTime @default(now())
  status     String
  sparePart  SparePart @relation(fields: [sparePartId], references: [sparePartId])
  user       User     @relation(fields: [userId], references: [id])
}

model Admin {
  adminID             String                @id
  email               String
  adminUsername       String
  password            String

  @@map("admin")
}
